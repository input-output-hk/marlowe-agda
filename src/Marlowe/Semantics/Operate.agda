module Marlowe.Semantics.Operate where

open import Agda.Builtin.Int using (Int)
open import Data.Bool as ùîπ using (Bool; if_then_else_; not; _‚àß_; _‚à®_; true; false)
open import Data.Integer as ‚Ñ§ using (‚à£_‚à£; +_)
open import Data.List using (List; []; _‚à∑_; _++_; foldr; reverse; [_]; null; map)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.List.Membership.DecSetoid using () renaming (_‚àà?_ to _‚àà?-List_)
open import Data.List.Membership.Setoid.Properties
open import Data.List.Relation.Unary.Any using (Any; here; there; lookup; any?)
open import Data.List.Relation.Unary.Any.Properties -- using (map‚Åª)
open import Data.Maybe using (Maybe; just; nothing; fromMaybe)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero; _<_; _<·µá_; _<?_; _‚âü_; z‚â§n; s‚â§s; _+_; _‚äî_; _‚à∏_; _‚â•_)
open import Data.Nat.Properties using (‚â∞‚áí>; ‚âÆ‚áí‚â•; ‚â§-reflexive; ‚â§-trans)
open import Data.Product using (Œ£; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ)
import Data.String as String
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function.Base using (_‚àò_ ;id)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Relation.Binary.Consequences

open import Marlowe.Language.Contract
open import Marlowe.Language.Input
open import Marlowe.Language.State
open import Marlowe.Language.Transaction
open import Marlowe.Semantics.Evaluate
open import Marlowe.Semantics.Reduce

open import Contrib.Data.List.AssocList renaming (_‚àà_ to _‚àà‚Ä≤_)
open Decidable _‚âü-AccountId√óToken_  renaming (_‚Äº_default_ to _‚Äº-AccountId√óToken_default_; _‚Üë_ to _‚Üë-AccountId√óToken_) hiding (_‚àà?_)
open Decidable _‚âü-ChoiceId_ renaming (_‚Äº_default_ to _‚Äº-ChoiceId_default_;  _‚Üë_ to _‚Üë-ChoiceId_) using (_‚àà?_)
open Decidable _‚âü-ValueId_ renaming (_‚Äº_ to _‚Äº_ValueId_; _‚Äº_default_ to _‚Äº-ValueId_default_; _‚àà?_ to _‚àà-ValueId?_; _‚Üë_ to _‚Üë-ValueId_)
open import Relation.Binary using (Decidable; DecidableEquality; WeaklyDecidable)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong; sym; trans)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Relation.Nullary using (Dec; yes; no; ¬¨_)


open Configuration
open State
open PosixTime
open TransactionInput

convertReduceWarnings : List ReduceWarning -> List TransactionWarning
convertReduceWarnings = map convertReduceWarning
  where
    convertReduceWarning : ReduceWarning ‚Üí TransactionWarning
    convertReduceWarning (ReduceNonPositivePay a p t v) = TransactionNonPositivePay a p t v
    convertReduceWarning (ReducePartialPay a p t v e) = TransactionPartialPay a p t v e
    convertReduceWarning (ReduceShadowing i o n) = TransactionShadowing i o n
    convertReduceWarning ReduceAssertionFailed = TransactionAssertionFailed

data Waiting : Configuration ‚Üí Set where

  waiting : ‚àÄ {cs t c s e ws ps}
    ‚Üí (interval-end e) < t
    -----------------------------------------------
    ‚Üí Waiting
        ‚ü™ When cs (mkTimeout (mkPosixTime t)) c
        , s
        , e
        , ws
        , ps
        ‚ü´

data _‚áí_ : {C : Configuration} ‚Üí Waiting C √ó Input ‚Üí Configuration ‚Üí Set where

  Deposit : ‚àÄ {a p t v n c‚Çê e s ws ps cs c t‚Çí D}
    ‚Üí (mkCase (Deposit a p t v) c‚Çê) ‚àà cs
    ‚Üí ‚Ñ∞‚ü¶ v ‚üß e s ‚â° + n
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí Quiescent D
    ‚Üí ( ‚ü™ c‚Çê
        , record s
            { accounts =
              ((a , t) , n) ‚Üë-update (accounts s)
            }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    -------------------------------------------------
    ‚Üí ( waiting {cs} {t‚Çí} {c} {s} {e} {ws} {ps} t‚Çë<t‚Çí
      , NormalInput (IDeposit a p t n)
      ) ‚áí D

  Choice : ‚àÄ {c‚Çê c i n s bs ws ps cs t‚Çí e D}
    ‚Üí (mkCase (Choice i bs) c‚Çê) ‚àà cs
    ‚Üí n inBounds bs ‚â° true
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí Quiescent D
    ‚Üí ( ‚ü™ c‚Çê
        , record s
            { choices =
              (i , unChosenNum n) ‚Üë-ChoiceId (choices s)
            }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    -------------------------------------------------
    ‚Üí ( waiting {cs} {t‚Çí} {c} {s} {e} {ws} {ps} t‚Çë<t‚Çí
      , NormalInput (IChoice i n)
      ) ‚áí D

  Notify : ‚àÄ {c‚Çê c s o cs t‚Çí e ws ps D}
    ‚Üí (mkCase (Notify o) c‚Çê) ‚àà cs
    ‚Üí ùí™‚ü¶ o ‚üß e s ‚â° true
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí Quiescent D
    ‚Üí ( ‚ü™ c‚Çê
        , s
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    -------------------------------------------------
    ‚Üí ( waiting {cs} {t‚Çí} {c} {s} {e} {ws} {ps} t‚Çë<t‚Çí
      , NormalInput INotify
      ) ‚áí D


data _‚Ü¶_ {s : State} {e : Environment} : InputContent ‚Üí Action ‚Üí Set where

  deposit-input : ‚àÄ {a p t v n}
    ‚Üí ‚Ñ∞‚ü¶ v ‚üß e s ‚â° + n
    ‚Üí IDeposit a p t n ‚Ü¶ Deposit a p t v

  choice-input : ‚àÄ {i n bs}
    ‚Üí n inBounds bs ‚â° true
    ‚Üí IChoice i n ‚Ü¶ Choice i bs

  notify-input : ‚àÄ {o}
    ‚Üí ùí™‚ü¶ o ‚üß e s ‚â° true
    ‚Üí INotify ‚Ü¶ Notify o

applicable? : ‚àÄ {s : State} {e : Environment} ‚Üí (i : InputContent) ‚Üí (a : Action) ‚Üí Maybe (_‚Ü¶_ {s} {e} i a)
applicable? {s} {e} (IDeposit a‚ÇÅ p‚ÇÅ t‚ÇÅ n) (Deposit a‚ÇÇ p‚ÇÇ t‚ÇÇ v)
  with a‚ÇÅ ‚âü-AccountId a‚ÇÇ | p‚ÇÅ ‚âü-Party p‚ÇÇ | t‚ÇÅ ‚âü-Token t‚ÇÇ | ‚Ñ∞‚ü¶ v ‚üß e s  ‚Ñ§.‚âü + n
... | yes refl | yes refl | yes refl | yes p = just (deposit-input {_} {_} {a‚ÇÅ} {p‚ÇÅ} {t‚ÇÅ} {v} {n} p)
... | _        | _        | _        | _     = nothing
applicable? (IDeposit _ _ _ _) (Choice _ _ ) = nothing
applicable? (IDeposit _ _ _ _) (Notify _) = nothing
applicable? (IChoice _ _ ) (Deposit _ _ _ _ ) = nothing
applicable? (IChoice i‚ÇÅ n) (Choice i‚ÇÇ b)
  with i‚ÇÅ ‚âü-ChoiceId i‚ÇÇ | n inBounds b ùîπ.‚âü true
... | yes refl | yes p = (just (choice-input {_} {_} {i‚ÇÅ} {n} {b} p))
... | _        | _     = nothing
applicable? (IChoice _ _) (Notify _) = nothing
applicable? INotify (Deposit _ _ _ _) = nothing
applicable? INotify (Choice _ _) = nothing
applicable? {s} {e} INotify (Notify o)
  with ùí™‚ü¶ o ‚üß e s ùîπ.‚âü true
... | yes p = just (notify-input {_} {_} {o = o} p)
... | no _  = nothing

-- Evaluator for mid-step semantics

{-# TERMINATING #-} -- TODO: use sized types instead
‚áí-eval :
  ‚àÄ {C : Configuration}
  ‚Üí (w : Waiting C)
  ‚Üí (i : Input)
  ‚Üí (Œ£[ D ‚àà Configuration ] ((w , i) ‚áí D)) ‚äé TransactionError
‚áí-eval {‚ü™ When [] (mkTimeout (mkPosixTime t‚Çí)) c , s , e , ws , ps ‚ü´} (waiting t‚Çë<t) (NormalInput ic) = inj‚ÇÇ TEApplyNoMatchError

‚áí-eval (waiting {mkCase a c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t) (NormalInput ic)
  with applicable? {s} {e} ic a

-- here
‚áí-eval (waiting {mkCase _ c‚Çê ‚à∑ cs} {_} {_} {s} {e} {ws} {ps} t‚Çë<t) (NormalInput ic) | just (deposit-input {a} {p} {t} {_} {n} ‚Ñ∞‚ü¶v‚üß‚â°+n)
  with ‚áÄ-eval ‚ü™ c‚Çê , record s { accounts = ((a , t) , n) ‚Üë-update (accounts s) } , e , ws , ps ‚ü´
... | D , C‚áÄ‚ãÜD , inj‚ÇÅ q = inj‚ÇÅ (D , Deposit (here refl) ‚Ñ∞‚ü¶v‚üß‚â°+n t‚Çë<t q C‚áÄ‚ãÜD)
... | _ , _    , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
‚áí-eval (waiting {mkCase _ c‚Çê ‚à∑ cs} {_} {_} {s} {e} {ws} {ps} t‚Çë<t) (NormalInput ic) | just (choice-input {i} {n} {bs} p)
  with ‚áÄ-eval ‚ü™ c‚Çê , record s { choices = (i , unChosenNum n) ‚Üë-ChoiceId (choices s) } , e , ws , ps ‚ü´
... | D , C‚áÄ‚ãÜD , inj‚ÇÅ q = inj‚ÇÅ (D , Choice (here refl) p t‚Çë<t q C‚áÄ‚ãÜD)
... | _ , _    , inj‚ÇÇ q = inj‚ÇÇ TEAmbiguousTimeIntervalError
‚áí-eval (waiting {mkCase _ c‚Çê ‚à∑ cs} {_} {_} {s} {e} {ws} {ps} t‚Çë<t) (NormalInput ic) | just (notify-input {o} o‚â°true)
  with ‚áÄ-eval ‚ü™ c‚Çê , s , e , ws , ps ‚ü´
... | D , C‚áÄ‚ãÜD , inj‚ÇÅ q = inj‚ÇÅ (D , Notify {s = s} {o = o} {e = e} (here refl) o‚â°true t‚Çë<t q C‚áÄ‚ãÜD)
... | _ , _    , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError

-- there
‚áí-eval (waiting {(_ ‚à∑ cs)} {_} {c} t‚Çë<t) i@(NormalInput (IDeposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ)) | nothing
  with ‚áí-eval (waiting {cs} {_} {c} t‚Çë<t) i
... | inj‚ÇÅ (D , (Deposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ)) = inj‚ÇÅ (D , (Deposit (there x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ))
... | inj‚ÇÇ e = inj‚ÇÇ e
‚áí-eval (waiting {(_ ‚à∑ cs)} {_} {c} {s} t‚Çë<t) i@(NormalInput (IChoice x x‚ÇÅ)) | nothing
  with ‚áí-eval (waiting {cs} {_} {c} {s} t‚Çë<t) i
... | inj‚ÇÅ (D , (Choice x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ)) = inj‚ÇÅ (D , (Choice (there x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ))
... | inj‚ÇÇ e = inj‚ÇÇ e
‚áí-eval (waiting {(_ ‚à∑ cs)} {_} {c} t‚Çë<t) i@(NormalInput INotify) | nothing
  with ‚áí-eval (waiting {cs} {_} {c} t‚Çë<t) i
... | inj‚ÇÅ (D , (Notify x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ)) = inj‚ÇÅ (D , (Notify (there x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ))
... | inj‚ÇÇ e = inj‚ÇÇ e


data _‚Üù_ : Configuration ‚Üí Configuration ‚Üí Set where

  trim-interval : ‚àÄ {c as cs bs t‚Çò t‚Çõ Œî‚Çú ws ps }
    ‚Üí (t‚Çõ + Œî‚Çú) ‚â• t‚Çò
    ‚Üí ‚ü™ c
      , ‚ü® as , cs , bs , mkPosixTime t‚Çò ‚ü©
      , mkEnvironment (mkInterval (mkPosixTime t‚Çõ) Œî‚Çú)
      , ws
      , ps
      ‚ü´
      ‚Üù
      ‚ü™ c
      , ‚ü® as , cs , bs , mkPosixTime (t‚Çõ ‚äî t‚Çò) ‚ü©
      , mkEnvironment (mkInterval (mkPosixTime (t‚Çõ ‚äî t‚Çò)) (Œî‚Çú ‚à∏ (t‚Çò ‚à∏ t‚Çõ)))
      , ws
      , ps
      ‚ü´

data FixInterval (B : Configuration) : Set where

  trim : ‚àÄ {C}
    ‚Üí B ‚Üù C
      -------------
    ‚Üí FixInterval B

  error :
    interval-end (environment B) < getPosixTime (minTime (state B))
    ‚Üí FixInterval B


fixInterval : ‚àÄ (B : Configuration) ‚Üí FixInterval B
fixInterval ‚ü™ _ , ‚ü® _ , _ , _ , mkPosixTime t‚Çò ‚ü© , mkEnvironment (mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) , _ , _ ‚ü´ with t‚Çõ + Œî‚Çú <? t‚Çò
... | yes p = error p
... | no p = trim (trim-interval (‚âÆ‚áí‚â• p))

record Result : Set where
  constructor ‚ü¶_,_,_‚üß
  field
    warnings : List TransactionWarning
    payments : List Payment
    state : State

data _‚áì_ : Contract √ó State ‚Üí Result ‚Üí Set where

  reduce-until-quiescent :
    ‚àÄ {C D ws ps s}
    ‚Üí warnings C ‚â° []
    ‚Üí payments C ‚â° []
    ‚Üí C ‚áÄ‚ãÜ D
    ‚Üí Quiescent D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws
      , ps
      , s
      ‚üß
    -------------------------------------------
    ‚Üí (contract C , state C) ‚áì
      ‚ü¶ ws ++ convertReduceWarnings (warnings D)
      , ps ++ payments D
      , s
      ‚üß

  apply-input :
    ‚àÄ {i cs t c s e ws ps C D ws‚Ä≤ ps‚Ä≤ s‚Ä≤}
    ‚Üí (t‚Çë<t : interval-end (environment C) < t)
    ‚Üí ‚ü™ When cs (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ ‚Üù C
    ‚Üí (waiting {cs} {t} {c} {state C} {environment C} {ws} {ps} t‚Çë<t , i) ‚áí D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws‚Ä≤
      , ps‚Ä≤
      , s‚Ä≤
      ‚üß
    -------------------------------------------
    ‚Üí (When cs (mkTimeout (mkPosixTime t)) c , s) ‚áì
      ‚ü¶ ws‚Ä≤ ++ convertReduceWarnings (warnings D)
      , ps‚Ä≤ ++ payments D
      , s‚Ä≤
      ‚üß

  done :
    ‚àÄ {s}
    ‚Üí accounts s ‚â° []
    -----------------
    ‚Üí (Close , s) ‚áì
      ‚ü¶ []
      , []
      , s
      ‚üß



{-# TERMINATING #-} -- TODO: use sized types instead
‚áì-eval :
  ‚àÄ (c : Contract)
  ‚Üí (s : State)
  ‚Üí List TransactionInput
  ‚Üí (Œ£[ r ‚àà Result ] (c , s) ‚áì r) ‚äé TransactionError

-- Close
‚áì-eval Close s@(‚ü® [] , _ , _ , _ ‚ü©) [] = inj‚ÇÅ (‚ü¶ [] , [] , s ‚üß , done refl)

-- When
‚áì-eval
  (When cs (mkTimeout (mkPosixTime t)) c) s@(‚ü® _ , _ , _ , mkPosixTime t‚Çò ‚ü©) ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) _) ‚à∑ is)
    with fixInterval ‚ü™ When cs (mkTimeout (mkPosixTime t)) c , s , mkEnvironment i , [] , [] ‚ü´
... | error _ = inj‚ÇÇ (TEIntervalError (IntervalInPastError (mkPosixTime t‚Çò) i))
... | trim {C} B‚ÜùC
    with interval-end (environment C) <? t
... | no t‚â§t‚Çë
    with ‚áÄ-eval ‚ü™ When cs (mkTimeout (mkPosixTime t)) c , s , mkEnvironment i , [] , [] ‚ü´
... | _ , _ , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , C√ói‚áíD , inj‚ÇÅ q
    with ‚áì-eval (contract D) (state D) is
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr)
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval
  (When cs (mkTimeout (mkPosixTime t)) c) s ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) []) ‚à∑ is)
    | trim B‚ÜùC | yes t‚Çë<t
    with ‚áÄ-eval ‚ü™ When cs (mkTimeout (mkPosixTime t)) _ , s , mkEnvironment i , [] , [] ‚ü´
... | _ , _ , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , C√ói‚áíD , inj‚ÇÅ q
    with ‚áì-eval (contract D) (state D) is
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr)
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval
  (When cs (mkTimeout (mkPosixTime t)) c) (‚ü® as , css , bs , mkPosixTime t‚Çò ‚ü©) ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) (ts ‚à∑ tss)) ‚à∑ is)
    | trim {C} B‚ÜùC | yes t‚Çë<t
    with ‚áí-eval (waiting {cs} {t} {c} {state C} {environment C} {[]} {[]} t‚Çë<t) ts
... | inj‚ÇÇ _ = inj‚ÇÇ TEUselessTransaction
... | inj‚ÇÅ (D , C√ói‚áíD)
    with ‚áì-eval (contract D) (state D) is
... | inj‚ÇÅ (‚ü¶ ws , ps , s‚Ä≤ ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s‚Ä≤ ‚üß , apply-input {ts} {cs} {t} {c} {_} {e = mkEnvironment i} {[]} {[]} t‚Çë<t B‚ÜùC C√ói‚áíD d√ós√óis‚áìr)
... | inj‚ÇÇ e = inj‚ÇÇ e

-- Otherwise
‚áì-eval c s []
    with ‚áÄ-eval ‚ü™ c , s , mkEnvironment (mkInterval (mkPosixTime 0) 0) , [] , [] ‚ü´
... | _ , _ , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , C√ói‚áíD , inj‚ÇÅ q
    with ‚áì-eval (contract D) (state D) []
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr)
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval c s ((mkTransactionInput i _) ‚à∑ is)
    with ‚áÄ-eval ‚ü™ c , s , mkEnvironment i , [] , [] ‚ü´
... | _ , _ , inj‚ÇÇ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , C√ói‚áíD , inj‚ÇÅ q
    with ‚áì-eval (contract D) (state D) is
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr)
... | inj‚ÇÇ e = inj‚ÇÇ e

private

  t‚Çí : PosixTime
  t‚Çí = mkPosixTime 100

  p‚ÇÅ : Party
  p‚ÇÅ = Role (mkByteString "role1")

  p‚ÇÇ : Party
  p‚ÇÇ = Role (mkByteString "role2")

  a‚ÇÅ : AccountId
  a‚ÇÅ = mkAccountId p‚ÇÅ

  a‚ÇÇ : AccountId
  a‚ÇÇ = mkAccountId p‚ÇÇ

  t : Token
  t = mkToken (mkByteString "") (mkByteString "")

  v : Value
  v = Constant (+ 1)

  d : Contract
  d = When ([ mkCase (Deposit a‚ÇÅ p‚ÇÇ t v) Close ]) (mkTimeout t‚Çí) Close

  c : Contract
  c = Assert FalseObs d

  s : State
  s = emptyState (mkPosixTime 0)

  i : TransactionInput
  i = mkTransactionInput (mkInterval (mkPosixTime 0) 10) [ NormalInput (IDeposit a‚ÇÅ p‚ÇÇ t 1) ]

  e : Environment
  e = mkEnvironment (mkInterval (mkPosixTime 0) 2)

  reduction-steps :
    (c , s)
    ‚áì ‚ü¶ [ TransactionAssertionFailed ]
      , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
      , s
      ‚üß
  reduction-steps =
    reduce-until-quiescent refl refl
      (‚ü™ c , s , e , [] , [] ‚ü´ ‚áÄ‚ü® AssertFalse refl ‚ü© (‚ü™ d , s , e , [ ReduceAssertionFailed ] , [] ‚ü´ ‚àé))
      (waiting (s‚â§s (s‚â§s (s‚â§s z‚â§n))))
      (apply-input {i = NormalInput (IDeposit a‚ÇÅ p‚ÇÇ t 1)} (s‚â§s (s‚â§s (s‚â§s z‚â§n))) (trim-interval z‚â§n)
        (Deposit (here refl) refl (s‚â§s (s‚â§s (s‚â§s z‚â§n))) close
          (‚ü™ Close , ‚ü® [((a‚ÇÅ , t) , 1)] , [] , [] , minTime s ‚ü© , e , []  , [] ‚ü´
                 ‚áÄ‚ü® CloseRefund ‚ü© (‚ü™ Close , ‚ü® [] , [] , [] , (minTime s) ‚ü© , e , [] , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ] ‚ü´) ‚àé))
        (done refl))

  _ = ‚áì-eval c s (i ‚à∑ []) ‚â°
       inj‚ÇÅ (
         ‚ü¶ [ TransactionAssertionFailed ]
         , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
         , s
         ‚üß , reduction-steps)
