module Marlowe.Semantics.Operate where

open import Agda.Builtin.Int using (Int)
open import Data.Bool as ùîπ using (Bool; if_then_else_; not; _‚àß_; _‚à®_; true; false)
open import Data.Integer as ‚Ñ§ using (‚à£_‚à£; +_)
open import Data.List using (List; []; _‚à∑_; _++_; foldr; reverse; [_]; null; map)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.List.Membership.DecSetoid using () renaming (_‚àà?_ to _‚àà?-List_)
open import Data.List.Membership.Setoid.Properties
open import Data.List.Relation.Unary.Any using (Any; here; there; lookup)
open import Data.List.Relation.Unary.Any.Properties using (map‚Åª)
open import Data.Maybe using (Maybe; just; nothing; fromMaybe)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero; _<_; _<?_; _‚âü_; z‚â§n; s‚â§s; _+_)
open import Data.Nat.Properties using (‚â∞‚áí>)
open import Data.Product using (Œ£; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ)
import Data.String as String
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary.Decidable using (‚åä_‚åã)

open import Marlowe.Language.Contract
open import Marlowe.Language.Input
open import Marlowe.Language.State
open import Marlowe.Language.Transaction
open import Marlowe.Semantics.Evaluate
open import Marlowe.Semantics.Reduce

open import Contrib.Data.List.Membership using (‚àà-‚à∑)
open import Contrib.Data.List.AssocList renaming (_‚àà_ to _‚àà‚Ä≤_)
open Decidable _‚âü-AccountId√óToken_  renaming (_‚Äº_default_ to _‚Äº-AccountId√óToken_default_; _‚Üë_ to _‚Üë-AccountId√óToken_) hiding (_‚àà?_)
open Decidable _‚âü-ChoiceId_ renaming (_‚Äº_default_ to _‚Äº-ChoiceId_default_;  _‚Üë_ to _‚Üë-ChoiceId_) using (_‚àà?_)
open Decidable _‚âü-ValueId_ renaming (_‚Äº_ to _‚Äº_ValueId_; _‚Äº_default_ to _‚Äº-ValueId_default_; _‚àà?_ to _‚àà-ValueId?_; _‚Üë_ to _‚Üë-ValueId_)

open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Relation.Nullary using (Dec; yes; no; ¬¨_)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong; sym)

open Configuration
open State
open PosixTime
open TransactionInput

convertReduceWarnings : List ReduceWarning -> List TransactionWarning
convertReduceWarnings = map convertReduceWarning
  where
    convertReduceWarning : ReduceWarning ‚Üí TransactionWarning
    convertReduceWarning (ReduceNonPositivePay a p t v) = TransactionNonPositivePay a p t v
    convertReduceWarning (ReducePartialPay a p t v e) = TransactionPartialPay a p t v e
    convertReduceWarning (ReduceShadowing i o n) = TransactionShadowing i o n
    convertReduceWarning ReduceAssertionFailed = TransactionAssertionFailed

data Waiting : Configuration ‚Üí Set where

  waiting : ‚àÄ {cs t c s e ws ps}
    ‚Üí (interval-end e) ‚Ñï.< t
    -----------------------------------------------
    ‚Üí Waiting
        ‚ü™ When cs (mkTimeout (mkPosixTime t)) c
        , s
        , e
        , ws
        , ps
        ‚ü´

data _‚áí_ : {C : Configuration} ‚Üí Waiting C √ó Input ‚Üí Configuration ‚Üí Set where

  Deposit : ‚àÄ {a p t v n c‚Çê e s ws ps cs c t‚Çí D}
    ‚Üí (mkCase (Deposit a p t v) c‚Çê) ‚àà cs
    ‚Üí ‚Ñ∞‚ü¶ v ‚üß e s ‚â° + n
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí (q : Quiescent D)
    ‚Üí ( ‚ü™ c‚Çê
        , record s
            { accounts =
              ((a , t) , n) ‚Üë-update (accounts s)
            }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    ----------------------------------------------------
    ‚Üí ( waiting {cs = cs} {t = t‚Çí} {c = c} {s = s} {e = e} {ws = ws} {ps = ps} t‚Çë<t‚Çí
      , NormalInput (IDeposit a p t n)
      ) ‚áí D

  Choice : ‚àÄ {c‚Çê c i n s bs ws ps cs t‚Çí e D}
    ‚Üí (mkCase (Choice i bs) c‚Çê) ‚àà cs
    ‚Üí n inBounds bs ‚â° true
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí (q : Quiescent D)
    ‚Üí ( ‚ü™ c‚Çê
        , record s
            { choices =
              (i , unChosenNum n) ‚Üë-ChoiceId (choices s)
            }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    ----------------------------------------------------
    ‚Üí ( waiting {cs = cs} {t = t‚Çí} {c = c} {s = s} {e = e} {ws = ws} {ps = ps} t‚Çë<t‚Çí
      , NormalInput (IChoice i n)
      ) ‚áí D

  Notify : ‚àÄ {c‚Çê c s o cs t‚Çí e ws ps D}
    ‚Üí (mkCase (Notify o) c‚Çê) ‚àà cs
    ‚Üí ùí™‚ü¶ o ‚üß e s ‚â° true
    ‚Üí (t‚Çë<t‚Çí : interval-end e < t‚Çí)
    ‚Üí (q : Quiescent D)
    ‚Üí ( ‚ü™ c‚Çê
        , s
        , e
        , ws
        , ps
        ‚ü´
      ) ‚áÄ‚ãÜ D
    --------------------------------------------
    ‚Üí ( waiting {cs = cs} {t = t‚Çí} {c = c} {s = s} {e = e} {ws = ws} {ps = ps} t‚Çë<t‚Çí
      , NormalInput INotify
      ) ‚áí D

{-# TERMINATING #-} -- TODO: replace recursion
‚áí-eval :
  ‚àÄ {C : Configuration}
  ‚Üí (w : Waiting C)
  ‚Üí (i : Input)
  ‚Üí (Œ£[ D ‚àà Configuration ] (((w , i) ‚áí D) √ó (Quiescent D))) ‚äé TransactionError
‚áí-eval (waiting {[]} _) _ = inj‚ÇÇ TEApplyNoMatchError

-- Deposit

‚áí-eval
  (waiting {mkCase (Deposit a‚ÇÅ p‚ÇÅ t‚ÇÅ v) c‚Çê ‚à∑ cs} {_} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput (IDeposit a‚ÇÇ p‚ÇÇ t‚ÇÇ n))
  with a‚ÇÅ ‚âü-AccountId a‚ÇÇ | p‚ÇÅ ‚âü-Party p‚ÇÇ | t‚ÇÅ ‚âü-Token t‚ÇÇ | ‚Ñ∞‚ü¶ v ‚üß e s  ‚Ñ§.‚âü + n |
    eval ‚ü™ c‚Çê , record s { accounts = ((a‚ÇÅ , t‚ÇÅ) , n) ‚Üë-update (accounts s) } , e , ws , ps ‚ü´
... | yes refl | yes refl | yes refl | yes ‚Ñ∞‚ü¶v‚üß‚â°+n | (D , Reduce-until-quiescent C‚áÄ‚ãÜD  q) = inj‚ÇÅ (D , Deposit (here refl) ‚Ñ∞‚ü¶v‚üß‚â°+n t‚Çë<t q C‚áÄ‚ãÜD , q)
... | yes _    | yes _    | yes _    | yes _       | (D , Ambiguous-time-interval _ _)    = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | _        | _        | _        | _           | _
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Deposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Deposit (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Deposit a p t v) c‚Çê ‚à∑ cs} {_} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput (IChoice i n))
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Choice x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Choice (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Deposit a p t v) c‚Çê ‚à∑ cs} {_} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput INotify)
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Notify x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Notify (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

-- Choice

‚áí-eval
  (waiting {mkCase (Choice i‚ÇÅ b‚ÇÅ) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  (NormalInput (IChoice i‚ÇÇ n‚ÇÇ))
  with i‚ÇÅ ‚âü-ChoiceId i‚ÇÇ | n‚ÇÇ inBounds b‚ÇÅ ùîπ.‚âü true |
    eval ‚ü™ c‚Çê , record s { choices = (i‚ÇÅ , unChosenNum n‚ÇÇ) ‚Üë-ChoiceId (choices s) } , e , ws , ps ‚ü´
... | yes refl | yes p | (D , Reduce-until-quiescent C‚áÄ‚ãÜD q) = inj‚ÇÅ (D , Choice (here refl) p t‚Çë<t q C‚áÄ‚ãÜD , q)
... | yes _    | yes _ | (_ , Ambiguous-time-interval _ _)    = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | _        | _     | _
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      (NormalInput (IChoice i‚ÇÇ n‚ÇÇ))
... | inj‚ÇÅ (D , (Choice x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Choice (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Choice i‚ÇÅ b‚ÇÅ) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput (IDeposit a‚ÇÇ p‚ÇÇ t‚ÇÇ n))
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Deposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Deposit (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Choice i‚ÇÅ b‚ÇÅ) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput INotify)
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Notify x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Notify (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

-- Notify

‚áí-eval
  (waiting {mkCase (Notify o) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  (NormalInput INotify)
  with ùí™‚ü¶ o ‚üß e s ùîπ.‚âü true |
    eval ‚ü™ c‚Çê , s , e , ws , ps ‚ü´
... | yes o‚â°true | (D , Reduce-until-quiescent C‚áÄ‚ãÜD q) = inj‚ÇÅ (D , Notify (here refl) o‚â°true t‚Çë<t q C‚áÄ‚ãÜD , q)
... | yes _      | (_ , Ambiguous-time-interval _ _)    = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | no _       | _
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} t‚Çë<t)
      (NormalInput INotify)
... | inj‚ÇÅ (D , (Notify x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Notify (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Notify o) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput (IDeposit a‚ÇÇ p‚ÇÇ t‚ÇÇ n))
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Deposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Deposit (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e

‚áí-eval
  (waiting {mkCase (Notify o) c‚Çê ‚à∑ cs} {t} {c} {s} {e} {ws} {ps} t‚Çë<t)
  x@(NormalInput (IChoice i n))
  with
    ‚áí-eval
      (waiting {cs = cs} {c = c} {s = s} t‚Çë<t)
      x
... | inj‚ÇÅ (D , (Choice x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) , q) = inj‚ÇÅ (D , (Choice (‚àà-‚à∑ x) x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ , q))
... | inj‚ÇÇ e = inj‚ÇÇ e


record Result : Set where
  constructor ‚ü¶_,_,_‚üß
  field
    warnings : List TransactionWarning
    payments : List Payment
    state : State

data _‚áì_ : Contract √ó State ‚Üí Result ‚Üí Set where

  reduce-until-quiescent :
    ‚àÄ {C D ws ps s}
    ‚Üí warnings C ‚â° []
    ‚Üí payments C ‚â° []
    ‚Üí C ‚áÄ‚ãÜ D
    ‚Üí Quiescent D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws
      , ps
      , s
      ‚üß
    -------------------------------------------
    ‚Üí (contract C , state C) ‚áì
      ‚ü¶ ws ++ convertReduceWarnings (warnings D)
      , ps ++ payments D
      , s
      ‚üß

  apply-inputs :
    ‚àÄ {i D s cs t c sc e ws ps ws‚Ä≤ ps‚Ä≤}
    ‚Üí (t‚Çë<t : (interval-end e) ‚Ñï.< t)
    ‚Üí (waiting {cs = cs} {t = t} {c = c} {s = sc} {e = e} {ws = ws} {ps = ps} t‚Çë<t , i) ‚áí D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws‚Ä≤
      , ps‚Ä≤
      , s
      ‚üß
    -------------------------------------------
    ‚Üí (When cs (mkTimeout (mkPosixTime t)) c , sc) ‚áì
      ‚ü¶ ws‚Ä≤ ++ convertReduceWarnings (warnings D)
      , ps‚Ä≤ ++ payments D
      , s
      ‚üß

  done :
    ‚àÄ {s}
    ‚Üí accounts s ‚â° []
    -----------------
    ‚Üí (Close , s) ‚áì
      ‚ü¶ []
      , []
      , s
      ‚üß

{-# TERMINATING #-} -- TODO: use sized types instead
‚áì-eval :
  ‚àÄ (c : Contract)
  ‚Üí (s : State)
  ‚Üí List TransactionInput
  ‚Üí (Œ£[ r ‚àà Result ] (c , s) ‚áì r) ‚äé TransactionError
‚áì-eval Close s@(‚ü® [] , _ , _ , _ ‚ü©) [] = inj‚ÇÅ (‚ü¶ [] , [] , s ‚üß , done refl)

‚áì-eval
  (When cases (mkTimeout (mkPosixTime t)) _) s ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) _) ‚à∑ is) with (t‚Çõ ‚Ñï.+ Œî‚Çú) <? t
... | no t‚â§t‚Çë
    with eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) _ , s , mkEnvironment i , [] , [] ‚ü´
...    | _ , Ambiguous-time-interval _ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
...    | D , Reduce-until-quiescent C√ói‚áíD ¬¨q
    with ‚áì-eval (contract D) (state D) is
...    | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) =
           inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D)
                 , ps ++ payments D
                 , s
                 ‚üß
                 , reduce-until-quiescent refl refl C√ói‚áíD ¬¨q d√ós√óis‚áìr
                )
...    | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval
  (When cases (mkTimeout (mkPosixTime t)) c) s ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) (ts ‚à∑ tss)) ‚à∑ is)
    | yes t‚Çë<t
    with ‚áí-eval (waiting  {cs = cases} {t = t} {c = c} {s = s} {e = mkEnvironment (mkInterval (mkPosixTime t‚Çõ) Œî‚Çú)} {ws = []} {ps = []} t‚Çë<t) ts -- TODO: fixInterval
...    | inj‚ÇÇ _ = inj‚ÇÇ TEUselessTransaction
...    | inj‚ÇÅ (D , C√ói‚áíD , _)
    with ‚áì-eval (contract D) (state D) is
...    | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) =
           inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D)
                 , ps ++ payments D
                 , s
                 ‚üß
                 , apply-inputs t‚Çë<t C√ói‚áíD d√ós√óis‚áìr
                )
...    | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval
  (When cases (mkTimeout (mkPosixTime t)) c) s ((mkTransactionInput i@(mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) []) ‚à∑ is)
    | yes t‚Çë<t
    with eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) _ , s , mkEnvironment i , [] , [] ‚ü´
...    | _ , Ambiguous-time-interval _ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
...    | D , Reduce-until-quiescent C√ói‚áíD ¬¨q
    with ‚áì-eval (contract D) (state D) is
...    | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) =
           inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D)
                 , ps ++ payments D
                 , s
                 ‚üß
                 , reduce-until-quiescent refl refl C√ói‚áíD ¬¨q d√ós√óis‚áìr
                )
...    | inj‚ÇÇ e = inj‚ÇÇ e

‚áì-eval c s []
    with eval ‚ü™ c , s , mkEnvironment (mkInterval (mkPosixTime 0) 0) , [] , [] ‚ü´
... | _ , Ambiguous-time-interval _ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , Reduce-until-quiescent C√ói‚áíD q
    with ‚áì-eval (contract D) (state D) []
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) =
      inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D)
            , ps ++ payments D
            , s
            ‚üß
            , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr
           )
... | inj‚ÇÇ e = inj‚ÇÇ e
‚áì-eval c s ((mkTransactionInput i _) ‚à∑ is)
    with eval ‚ü™ c , s , mkEnvironment i , [] , [] ‚ü´
... | _ , Ambiguous-time-interval _ _ = inj‚ÇÇ TEAmbiguousTimeIntervalError
... | D , Reduce-until-quiescent C√ói‚áíD q
    with ‚áì-eval (contract D) (state D) is
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) =
      inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D)
            , ps ++ payments D
            , s
            ‚üß
            , reduce-until-quiescent refl refl C√ói‚áíD q d√ós√óis‚áìr
           )
... | inj‚ÇÇ e = inj‚ÇÇ e

private

  t‚Çí : PosixTime
  t‚Çí = mkPosixTime 100

  p‚ÇÅ : Party
  p‚ÇÅ = Role (mkByteString "role1")

  p‚ÇÇ : Party
  p‚ÇÇ = Role (mkByteString "role2")

  a‚ÇÅ : AccountId
  a‚ÇÅ = mkAccountId p‚ÇÅ

  a‚ÇÇ : AccountId
  a‚ÇÇ = mkAccountId p‚ÇÇ

  t : Token
  t = mkToken (mkByteString "") (mkByteString "")

  v : Value
  v = Constant (+ 1)

  d : Contract
  d = When ([ mkCase (Deposit a‚ÇÅ p‚ÇÇ t v) Close ]) (mkTimeout t‚Çí) Close

  c : Contract
  c = Assert FalseObs d

  s : State
  s = emptyState (mkPosixTime 0)

  i : TransactionInput
  i = mkTransactionInput (mkInterval (mkPosixTime 0) 10) [ NormalInput (IDeposit a‚ÇÅ p‚ÇÇ t 1) ]

  e : Environment
  e = mkEnvironment (mkInterval (mkPosixTime 0) 2)

  reduction-steps :
    (c , s)
    ‚áì ‚ü¶ [ TransactionAssertionFailed ]
      , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
      , s
      ‚üß
  reduction-steps =
    reduce-until-quiescent refl refl
      (‚ü™ c , s , e , [] , [] ‚ü´ ‚áÄ‚ü® AssertFalse refl ‚ü© (‚ü™ d , s , e , [ ReduceAssertionFailed ] , [] ‚ü´ ‚àé))
      (waiting (s‚â§s (s‚â§s (s‚â§s z‚â§n))))
      (apply-inputs {i = NormalInput (IDeposit a‚ÇÅ p‚ÇÇ t 1)} (s‚â§s (s‚â§s (s‚â§s z‚â§n)))
        (Deposit (here refl) refl (s‚â§s (s‚â§s (s‚â§s z‚â§n))) close
          (‚ü™ Close , ‚ü® [((a‚ÇÅ , t) , 1)] , [] , [] , minTime s ‚ü© , e , []  , [] ‚ü´
                 ‚áÄ‚ü® CloseRefund ‚ü© (‚ü™ Close , ‚ü® [] , [] , [] , (minTime s) ‚ü© , e , [] , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ] ‚ü´) ‚àé))
        (done refl))

  _ = ‚áì-eval c s (i ‚à∑ []) ‚â°
       inj‚ÇÅ (
         ‚ü¶ [ TransactionAssertionFailed ]
         , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
         , s
         ‚üß , reduction-steps)
