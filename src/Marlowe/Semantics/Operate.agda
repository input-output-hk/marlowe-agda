module Marlowe.Semantics.Operate where

open import Agda.Builtin.Int using (Int)
open import Data.Bool as ùîπ using (Bool; if_then_else_; not; _‚àß_; _‚à®_; true; false)
open import Data.Integer using (_<?_; _‚â§?_; _‚âü_ ; _‚äî_; _‚äì_; _+_; _-_; +_; 0‚Ñ§ ; _‚â§_ ; _>_ ; _‚â•_ ; _<_; ‚à£_‚à£)
open import Data.List using (List; []; _‚à∑_; _++_; foldr; reverse; [_]; null; map)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.List.Membership.DecSetoid using () renaming (_‚àà?_ to _‚àà?-List_)
open import Data.List.Relation.Unary.Any using (Any; here; there)
open import Data.Maybe using (Maybe; just; nothing; fromMaybe)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Data.Product using (Œ£; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ)
import Data.String as String
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary.Decidable using (‚åä_‚åã)

open import Marlowe.Language.Contract
open import Marlowe.Language.Input
open import Marlowe.Language.State
open import Marlowe.Language.Transaction
open import Marlowe.Semantics.Evaluate
open import Marlowe.Semantics.Reduce

open import Contrib.Data.List.AssocList hiding (_‚àà_)
open Decidable _‚âü-AccountId√óToken_  renaming (_‚Äº_default_ to _‚Äº-AccountId√óToken_default_; _‚Üë_ to _‚Üë-AccountId√óToken_) hiding (_‚àà?_)
open Decidable _‚âü-ChoiceId_ renaming (_‚Äº_default_ to _‚Äº-ChoiceId_default_;  _‚Üë_ to _‚Üë-ChoiceId_) using (_‚àà?_)
open Decidable _‚âü-ValueId_ renaming (_‚Äº_ to _‚Äº_ValueId_; _‚Äº_default_ to _‚Äº-ValueId_default_; _‚àà?_ to _‚àà-ValueId?_; _‚Üë_ to _‚Üë-ValueId_)

open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Relation.Nullary using (Dec; yes; no; ¬¨_)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong; sym)

open Configuration
open State
open PosixTime
open TransactionInput

convertReduceWarnings : List ReduceWarning -> List TransactionWarning
convertReduceWarnings = map convertReduceWarning
  where
    convertReduceWarning : ReduceWarning ‚Üí TransactionWarning
    convertReduceWarning (ReduceNonPositivePay a p t v) = TransactionNonPositivePay a p t v
    convertReduceWarning (ReducePartialPay a p t v e) = TransactionPartialPay a p t v e
    convertReduceWarning (ReduceShadowing i o n) = TransactionShadowing i o n
    convertReduceWarning ReduceAssertionFailed = TransactionAssertionFailed

data _‚áí_ : Configuration √ó TransactionInput ‚Üí Configuration ‚Üí Set where

  Deposit :
    ‚àÄ {a p t v n c e s ws ps cases cont timeout D is}
    ‚Üí (mkCase (Deposit a p t v) c) ‚àà cases
    ‚Üí ‚à£ ‚Ñ∞‚ü¶ v ‚üß e s ‚à£ ‚â° n
    ‚Üí interval-end e ‚Ñï.< timeout
    ‚Üí ( ‚ü™ c
        , record s { accounts = ((a , t) , n) ‚Üë-update (accounts s) }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚Ü† D
    -------------------------------------------------------------------
    ‚Üí ( ‚ü™ When cases (mkTimeout (mkPosixTime timeout)) cont
        , s
        , e
        , ws
        , ps
        ‚ü´
      , record is { inputs = NormalInput (IDeposit a p t n) ‚à∑ inputs is }
      ) ‚áí D

  Choice :
    ‚àÄ {c cont i n s is bs ws ps cases timeout e D}
    ‚Üí (mkCase (Choice i bs) c) ‚àà cases
    ‚Üí n inBounds bs ‚â° true
    ‚Üí interval-end e ‚Ñï.< timeout
    ‚Üí ( ‚ü™ c
        , record s { choices = (i , unChosenNum n) ‚Üë-ChoiceId (choices s) }
        , e
        , ws
        , ps
        ‚ü´
      ) ‚Ü† D
    -----------------------------------------------------------------
    ‚Üí ( ‚ü™ When cases (mkTimeout (mkPosixTime timeout)) cont
        , s
        , e
        , ws
        , ps
        ‚ü´
      , record is { inputs = NormalInput (IChoice i n) ‚à∑ inputs is }
      ) ‚áí D

  Notify :
    ‚àÄ {c cont is s o cases timeout e ws ps D}
    ‚Üí (mkCase (Notify o) c) ‚àà cases
    ‚Üí ùí™‚ü¶ o ‚üß e s ‚â° true
    ‚Üí interval-end e ‚Ñï.< timeout
    ‚Üí ( ‚ü™ c
        , s
        , e
        , ws
        , ps
        ‚ü´
      ) ‚Ü† D
    ---------------------------------------------------
    ‚Üí ( ‚ü™ When cases (mkTimeout (mkPosixTime timeout)) cont
        , s
        , e
        , ws
        , ps
        ‚ü´
      , record is { inputs = NormalInput INotify ‚à∑ inputs is }
      ) ‚áí D

‚à∑-preserves-‚àà :
  ‚àÄ {A : Set} {x : A} {a : A} {as : List A}
  ‚Üí x ‚àà as
  --------------
  ‚Üí x ‚àà (a ‚à∑ as)
‚à∑-preserves-‚àà (here refl) = there (here refl)
‚à∑-preserves-‚àà (there x) = there (‚à∑-preserves-‚àà x)

case‚à∑-preserves-‚áí :
  ‚àÄ { cases t c s e ws ps i case D}
  ‚Üí (( ‚ü™ When cases t c , s , e , ws , ps ‚ü´ , i) ‚áí D)
  ‚Üí (( ‚ü™ When (case ‚à∑ cases) t c , s , e , ws , ps ‚ü´ , i) ‚áí D)
case‚à∑-preserves-‚áí (Deposit x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = Deposit (‚à∑-preserves-‚àà x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
case‚à∑-preserves-‚áí (Choice x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = Choice (‚à∑-preserves-‚àà x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
case‚à∑-preserves-‚áí (Notify x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = Notify (‚à∑-preserves-‚àà x) x‚ÇÅ x‚ÇÇ x‚ÇÉ

‚áí-eval :
  ‚àÄ (C : Configuration)
  ‚Üí (i : TransactionInput)
  ‚Üí ‚Ñï
  ‚Üí (Œ£[ D ‚àà Configuration ] (((C , i) ‚áí D) √ó (Quiescent D))) ‚äé TransactionError
‚áí-eval ‚ü™ When [] (mkTimeout (mkPosixTime t)) c , s , e , w , p ‚ü´ i@(mkTransactionInput (mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) _) _ = inj‚ÇÇ TEApplyNoMatchError
‚áí-eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) c , s , e , w , p ‚ü´ i@(mkTransactionInput (mkInterval (mkPosixTime t‚Çõ) Œî‚Çú) []) _ = inj‚ÇÇ TEUselessTransaction
‚áí-eval ‚ü™ When (mkCase (Deposit a‚ÇÅ p‚ÇÅ t‚ÇÅ v) c‚Çê ‚à∑ cases) (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput (IDeposit a‚ÇÇ p‚ÇÇ t‚ÇÇ n) ‚à∑ is)) (suc m)
  with a‚ÇÅ ‚âü-AccountId a‚ÇÇ
  with p‚ÇÅ ‚âü-Party p‚ÇÇ
  with t‚ÇÅ ‚âü-Token t‚ÇÇ
  with ‚à£ ‚Ñ∞‚ü¶ v ‚üß e s ‚à£ ‚Ñï.‚âü n
  with interval-end e ‚Ñï.<? t
  with eval ‚ü™ c‚Çê , record s { accounts = ((a‚ÇÅ , t‚ÇÅ) , n) ‚Üë-update (accounts s) } , e , ws , ps ‚ü´ m
... | yes refl | yes refl | yes refl | yes refl | yes t-check | (D , C‚áÄ‚ãÜD , inj‚ÇÅ q) = inj‚ÇÅ (D , Deposit (here refl) refl t-check (Reduce-until-quiescent C‚áÄ‚ãÜD q) , q)
... | _ | _ | _ | _ | _ | _
  with ‚áí-eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput (IDeposit a‚ÇÇ p‚ÇÇ t‚ÇÇ n) ‚à∑ is)) m
... | inj‚ÇÅ (D , C√ói‚áíD , q) = inj‚ÇÅ (D , (case‚à∑-preserves-‚áí C√ói‚áíD , q))
... | inj‚ÇÇ y = inj‚ÇÇ y
‚áí-eval ‚ü™ When (mkCase (Choice i‚ÇÅ b‚ÇÅ) c‚Çê ‚à∑ cases) (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput (IChoice i‚ÇÇ n‚ÇÇ) ‚à∑ is)) (suc m)
  with i‚ÇÅ ‚âü-ChoiceId i‚ÇÇ
  with n‚ÇÇ inBounds b‚ÇÅ ùîπ.‚âü true
  with interval-end e ‚Ñï.<? t
  with eval ‚ü™ c‚Çê , record s { choices = (i‚ÇÅ , unChosenNum n‚ÇÇ) ‚Üë-ChoiceId (choices s) } , e , ws , ps ‚ü´ m
... | yes refl | yes p | yes t-check | (D , C‚áÄ‚ãÜD , inj‚ÇÅ q) = inj‚ÇÅ (D , Choice (here refl) p t-check (Reduce-until-quiescent C‚áÄ‚ãÜD q) , q)
... | _ | _ | _ | _
  with ‚áí-eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput (IChoice i‚ÇÇ n‚ÇÇ) ‚à∑ is)) m
... | inj‚ÇÅ (D , C√ói‚áíD , q) = inj‚ÇÅ (D , (case‚à∑-preserves-‚áí C√ói‚áíD , q))
... | inj‚ÇÇ y = inj‚ÇÇ y
‚áí-eval ‚ü™ When (mkCase (Notify o) c‚Çê ‚à∑ cases) (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput INotify ‚à∑ is)) (suc m)
  with ùí™‚ü¶ o ‚üß e s ùîπ.‚âü true
  with interval-end e ‚Ñï.<? t
  with eval ‚ü™ c‚Çê , s , e , ws , ps ‚ü´ m
... | yes p | yes t-check | (D , C‚áÄ‚ãÜD , inj‚ÇÅ q) = inj‚ÇÅ (D , Notify (here refl) p t-check (Reduce-until-quiescent C‚áÄ‚ãÜD q) , q)
... | _ | _ | _
  with ‚áí-eval ‚ü™ When cases (mkTimeout (mkPosixTime t)) c , s , e , ws , ps ‚ü´ (mkTransactionInput i (NormalInput INotify ‚à∑ is)) m
... | inj‚ÇÅ (D , C√ói‚áíD , q) = inj‚ÇÅ (D , (case‚à∑-preserves-‚áí C√ói‚áíD , q))
... | inj‚ÇÇ y = inj‚ÇÇ y
‚áí-eval C x _ = inj‚ÇÇ TEUselessTransaction


record Result : Set where
  constructor ‚ü¶_,_,_‚üß
  field
    warnings : List TransactionWarning
    payments : List Payment
    state : State

data _‚áì_ : Contract √ó State ‚Üí Result ‚Üí Set where

  reduce-until-quiescent :
    ‚àÄ {C D ws ps s}
    ‚Üí warnings C ‚â° []
    ‚Üí payments C ‚â° []
    ‚Üí C ‚Ü† D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws
      , ps
      , s
      ‚üß
    -------------------------------------------
    ‚Üí (contract C , state C) ‚áì
      ‚ü¶ ws ++ convertReduceWarnings (warnings D)
      , ps ++ payments D
      , s
      ‚üß

  apply-inputs :
    ‚àÄ {i C D ws ps s}
    ‚Üí warnings C ‚â° []
    ‚Üí payments C ‚â° []
    ‚Üí (C , i) ‚áí D
    ‚Üí (contract D , state D) ‚áì
      ‚ü¶ ws
      , ps
      , s
      ‚üß
    -------------------------------------------
    ‚Üí (contract C , state C) ‚áì
      ‚ü¶ ws ++ convertReduceWarnings (warnings D)
      , ps ++ payments D
      , s
      ‚üß

  done :
    ‚àÄ {s}
    ‚Üí accounts s ‚â° []
    -----------------
    ‚Üí (Close , s) ‚áì
      ‚ü¶ []
      , []
      , s
      ‚üß

‚áì-eval :
  ‚àÄ (c : Contract)
  ‚Üí (s : State)
  ‚Üí (is : List TransactionInput)
  ‚Üí ‚Ñï
  ‚Üí (Œ£[ r ‚àà Result ] (c , s) ‚áì r) ‚äé TransactionError
‚áì-eval _ _ _ zero = inj‚ÇÇ TEUselessTransaction
‚áì-eval Close s@(‚ü® [] , _ , _ , _ ‚ü©) [] _ = inj‚ÇÅ (‚ü¶ [] , [] , s ‚üß , done refl)
‚áì-eval c@(When _ _ _) s (i ‚à∑ is) (suc m) with ‚áí-eval (‚ü™ c , s , mkEnvironment (mkInterval (mkPosixTime 0) 0) , [] , [] ‚ü´) i m
... | inj‚ÇÇ y = inj‚ÇÇ TEUselessTransaction
... | inj‚ÇÅ (D , C√ói‚áíD , _) with ‚áì-eval (contract D) (state D) is m
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , apply-inputs refl refl C√ói‚áíD d√ós√óis‚áìr )
... | inj‚ÇÇ y = inj‚ÇÇ y
‚áì-eval c s is (suc m) with eval (‚ü™ c , s , mkEnvironment (mkInterval (mkPosixTime 0) 0) , [] , [] ‚ü´) m
... | _ , _ , inj‚ÇÇ e = inj‚ÇÇ TEUselessTransaction
... | D , C√ói‚áíD , inj‚ÇÅ q with ‚áì-eval (contract D) (state D) is m
... | inj‚ÇÅ (‚ü¶ ws , ps , s ‚üß , d√ós√óis‚áìr) = inj‚ÇÅ (‚ü¶ ws ++ convertReduceWarnings (warnings D) , ps ++ payments D , s ‚üß , reduce-until-quiescent refl refl (Reduce-until-quiescent C√ói‚áíD q) d√ós√óis‚áìr)
... | inj‚ÇÇ y = inj‚ÇÇ y

private

  timeout : PosixTime
  timeout = mkPosixTime 100

  p‚ÇÅ : Party
  p‚ÇÅ = Role (mkByteString "role1")

  p‚ÇÇ : Party
  p‚ÇÇ = Role (mkByteString "role2")

  a‚ÇÅ : AccountId
  a‚ÇÅ = mkAccountId p‚ÇÅ

  a‚ÇÇ : AccountId
  a‚ÇÇ = mkAccountId p‚ÇÇ

  t : Token
  t = mkToken (mkByteString "") (mkByteString "")

  v : Value
  v = Constant (+ 1)

  d : Contract
  d = When ([ mkCase (Deposit a‚ÇÅ p‚ÇÇ t v) Close ]) (mkTimeout timeout) Close

  c : Contract
  c = Assert FalseObs d

  s : State
  s = emptyState (mkPosixTime 0)

  i : TransactionInput
  i = mkTransactionInput (mkInterval (mkPosixTime 0) 10) [ NormalInput (IDeposit a‚ÇÅ p‚ÇÇ t 1) ]

  e : Environment
  e = mkEnvironment (mkInterval (mkPosixTime 0) 2)

  reduction-steps :
    (c , s)
    ‚áì ‚ü¶ [ TransactionAssertionFailed ]
      , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
      , s
      ‚üß
  reduction-steps =
    reduce-until-quiescent refl refl
      (Reduce-until-quiescent
        ((‚ü™ c , s , e , [] , [] ‚ü´) ‚áÄ‚ü® AssertFalse refl ‚ü© (‚ü™ d , s , e , [ ReduceAssertionFailed ] , [] ‚ü´) ‚àé)
        (waiting (‚Ñï.s‚â§s (‚Ñï.s‚â§s (‚Ñï.s‚â§s ‚Ñï.z‚â§n)))))
      (apply-inputs {i = i} refl refl (Deposit (here refl) refl (‚Ñï.s‚â§s (‚Ñï.s‚â§s (‚Ñï.s‚â§s ‚Ñï.z‚â§n)))
        (Reduce-until-quiescent
          (‚ü™ Close , ‚ü® [((a‚ÇÅ , t) , 1)] , [] , [] , minTime s ‚ü© , e , []  , [] ‚ü´
                 ‚áÄ‚ü® CloseRefund ‚ü© (‚ü™ Close , ‚ü® [] , [] , [] , (minTime s) ‚ü© , e , [] , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ] ‚ü´) ‚àé)
          close))
        (done refl))

  _ = ‚áì-eval c s (i ‚à∑ []) 100 ‚â°
       inj‚ÇÅ (
         ‚ü¶ [ TransactionAssertionFailed ]
         , [ a‚ÇÅ [ t , 1 ]‚Ü¶ mkParty p‚ÇÅ ]
         , s
         ‚üß , reduction-steps)
